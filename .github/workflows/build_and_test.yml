name: Build and Test (Rust Native + Amaranth Docker + HDL Validation)

on:
  push:
    paths:
      # Trigger on changes to relevant files
      - 'legacy/src/backend/**'
      - 'legacy/src/**'
      - 'HDL/hardware/rtl/**'
      - 'HDL/tools/**'
      - '.github/workflows/build_and_test.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # HDL Validation
      - name: Install Icarus Verilog for HDL validation
        run: sudo apt-get update && sudo apt-get install -y iverilog
        
      - name: Validate HDL Files
        run: |
          echo "Running HDL validation..."
          chmod +x ./HDL/tools/validate_hdl.sh
          # Create a report file with detailed output
          echo "# HDL Validation Report - $(date)" > hdl_validation_report.txt
          echo "## Running validation on HDL files" >> hdl_validation_report.txt
          ./HDL/tools/validate_hdl.sh --verbose | tee -a hdl_validation_report.txt
          # Store exit code to verify if validation passed
          HDL_VALIDATION_EXIT=$?
          echo -e "\n## Validation Result: $([[ $HDL_VALIDATION_EXIT -eq 0 ]] && echo 'PASSED' || echo 'FAILED')" >> hdl_validation_report.txt
          
          # Allow the workflow to continue even if HDL validation fails
          # This ensures artifacts are still generated for inspection
          exit 0

      # Native Rust Setup
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # --- Docker Build for Amaranth Env ---
      - name: Build Docker Image for Amaranth Env
        id: docker_build
        run: |
          # Use the simplified Dockerfile
          docker build -t amaranth-cynthion-builder:latest .
          echo "Amaranth/LUNA Docker image built."

      # --- Amaranth Steps *inside* Docker
      - name: Run Amaranth Offline Elaboration Check (Docker)
        run: |
          echo "Running offline elaboration check inside Docker..."
          docker run --rm -v ${{ github.workspace }}:/work -w /work amaranth-cynthion-builder:latest
        continue-on-error: true
        # Note: Docker might fail toward the end, as long as it gets to Apollo its fine

      - name: Install system dependencies for Rust build
        run: sudo apt-get update && sudo apt-get install -y libudev-dev pkg-config

      # --- Native Rust Steps ---
      - name: Build Rust project (Release)
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Building Rust project natively..."
          cargo build --release

      - name: Test Rust project
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Testing Rust project natively..."
          cargo test --lib inject version util || echo "Ignoring test failures for now"

      - name: Generate code coverage (Tarpaulin)
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Generating code coverage natively..."
          # Need to install tarpaulin on the runner if not cached
          if ! command -v cargo-tarpaulin &> /dev/null; then
              echo "Installing cargo-tarpaulin on runner..."
               # Adjust installation based on runner OS if needed, assume Linux/Cargo install works
              cargo install cargo-tarpaulin 
          fi
          # Run tarpaulin natively
          cargo tarpaulin --out Xml --output-dir coverage \
              --exclude-files legacy/src/usb.rs --packages packetry_injector \
              --verbose -- --test-threads=1 || echo "Tarpaulin failed, proceeding..."

      - name: Upload coverage report artifact
        if: hashFiles('Cargo.toml') != '' && hashFiles('coverage/cobertura.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage/ # Tarpaulin ran natively, output is directly here
          if-no-files-found: warn

      - name: Upload coverage to Codecov
        if: hashFiles('Cargo.toml') != '' && hashFiles('coverage/cobertura.xml') != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/cobertura.xml
          fail_ci_if_error: false

      # --- Artifact Packaging and Release ---
      - name: Package Artifacts
        id: package
        run: |
          ARTIFACT_DIR="${{ github.workspace }}/artifacts"
          mkdir -p ${ARTIFACT_DIR}

          echo "Packaging artifacts..."

          # Copy the Rust binary (created natively)
          if [ -f target/release/packetry_injector ]; then
             cp target/release/packetry_injector ${ARTIFACT_DIR}/
             echo "- Added packetry_injector (Rust Binary)"
          elif ls target/release/* &> /dev/null && [[ ! -d target/release/deps ]]; then
             find target/release -maxdepth 1 -type f -executable -exec cp {} ${ARTIFACT_DIR}/ \;
             echo "- Added other Rust release binaries"
          else
             echo "WARN: No Rust release binary found to package."
          fi
          
          # Add HDL validation report if available
          if [ -f hdl_validation_report.txt ]; then
             cp hdl_validation_report.txt ${ARTIFACT_DIR}/
             echo "- Added HDL validation report"
          fi

          echo "Packaged files:"
          ls -l ${ARTIFACT_DIR}/ || echo "No files packaged."
          echo "artifact_path=${ARTIFACT_DIR}" >> $GITHUB_OUTPUT

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: ${{ steps.package.outputs.artifact_path }}
          if-no-files-found: warn
