name: Build and Test (Rust + Amaranth Check) # Renamed for clarity

on:
  push:
    paths:
      # Trigger on changes to the Amaranth script, Rust source, or the workflow itself
      - 'src/backend/mouse_streamer.py'
      - 'src/**' # Covers Rust changes too
      - '.github/workflows/build_and_test.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Renamed the job for better description
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies (Python/Build Essentials)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-pip python3-dev \
            python3-setuptools python3-wheel

      # --- FPGA Toolchain (OSS CAD Suite) Removed ---
      # This section is no longer needed as the Python script only performs
      # an offline elaboration check and doesn't invoke Yosys/nextpnr.

      - name: Install Python requirements for Amaranth/LUNA Check
        run: |
          python3 -m pip install --upgrade pip
          # Install Amaranth, LUNA, Cynthion, and dependencies needed for the offline check
          # Added cynthion and pygreat explicitly for clarity
          python3 -m pip install setuptools wheel pyvcd pytest pyserial
          python3 -m pip install amaranth amaranth-boards cynthion pygreat
          # Install LUNA directly from GitHub
          python3 -m pip install git+https://github.com/greatscottgadgets/luna.git

      # Renamed step and updated logic for offline check
      - name: Run Amaranth Offline Elaboration Check
        run: |
          echo "Running offline elaboration check using src/backend/mouse_streamer.py..."
          # Execute the python script - it should exit successfully if elaboration works
          # No need to check for a ".bit" file anymore.
          python3 src/backend/mouse_streamer.py
          echo "Amaranth offline elaboration check completed successfully."

      # --- Rust Build and Test Steps (Unchanged) ---

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Rust project (Release)
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Building Rust project..."
          cargo build --release

      - name: Test Rust project
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Testing Rust project..."
          cargo test --lib inject version util || echo "Ignoring test failures for now"

      - name: Check Rust code formatting
        if: hashFiles('Cargo.toml') != ''
        run: |
          rustup component add rustfmt
          cargo fmt -- --check

      # --- Coverage Steps (Unchanged) ---
      - name: Generate code coverage (Tarpaulin)
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Generating code coverage..."
          if ! command -v cargo-tarpaulin &> /dev/null; then
            echo "Installing cargo-tarpaulin..."
            cargo install cargo-tarpaulin --version 0.27
          fi
          cargo tarpaulin --out Xml --output-dir coverage --exclude-files src/usb.rs --packages packetry_injector --verbose -- --test-threads=1 || echo "Tarpaulin failed, proceeding..."

      - name: Upload coverage report artifact
        if: hashFiles('Cargo.toml') != '' && hashFiles('coverage/cobertura.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage/
          if-no-files-found: warn

      - name: Upload coverage to Codecov
        if: hashFiles('Cargo.toml') != '' && hashFiles('coverage/cobertura.xml') != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/cobertura.xml
          fail_ci_if_error: false

      # --- Artifact and Release Steps (Updated to remove bitstream handling) ---

      - name: Package Artifacts
        id: package
        run: |
          ARTIFACT_DIR="${{ github.workspace }}/artifacts"
          mkdir -p ${ARTIFACT_DIR}

          echo "Packaging build artifacts (Rust binary)..."
          # --- Bitstream Copy Removed ---
          # No longer copying a bitstream file as it's not generated by the default script run.

          # Copy the Rust binary if it exists
          if [ -f target/release/packetry_injector ]; then
             cp target/release/packetry_injector ${ARTIFACT_DIR}/
             echo "- Added packetry_injector (Rust Binary)"
          elif ls target/release/* &> /dev/null && [[ ! -d target/release/deps ]]; then # Copy other release binaries if they exist
             find target/release -maxdepth 1 -type f -executable -exec cp {} ${ARTIFACT_DIR}/ \;
             echo "- Added other Rust release binaries"
          else
             echo "WARN: No Rust release binary found to package."
          fi

          # List packaged files
          echo "Packaged files:"
          ls -l ${ARTIFACT_DIR}/ || echo "No files packaged."

          # Set output for artifact name
          echo "artifact_path=${ARTIFACT_DIR}" >> $GITHUB_OUTPUT

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          # Consider renaming artifact if it no longer contains Cynthion-specific hardware files
          name: build-artifacts-${{ github.run_number }}
          path: ${{ steps.package.outputs.artifact_path }}
          if-no-files-found: warn # Changed to warn as only Rust binary might be packaged

      - name: Generate Changelog for Release
        if: github.ref_type == 'tag'
        id: changelog
        run: |
          CHANGELOG_FILE="${{ github.workspace }}/CHANGELOG_RELEASE.md"
          echo "# Release ${{ github.ref_name }}" > ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "Automatic release generated by GitHub Action." >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## Build Information" >> ${CHANGELOG_FILE}
          echo "- Commit: \`${{ github.sha }}\`" >> ${CHANGELOG_FILE}
          echo "- Date: $(date)" >> ${CHANGELOG_FILE}
          # Updated text to reflect Amaranth check instead of build
          echo "- Amaranth code checked using \`src/backend/mouse_streamer.py\`." >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## Included Files" >> ${CHANGELOG_FILE}

          ARTIFACT_DIR="${{ steps.package.outputs.artifact_path }}"
          if ls ${ARTIFACT_DIR}/* &> /dev/null; then
            for file in ${ARTIFACT_DIR}/*; do
              echo "* \`$(basename "$file")\`" >> ${CHANGELOG_FILE}
            done
          else
            echo "* No binary files included in artifact." >> ${CHANGELOG_FILE}
          fi

          echo "" >> ${CHANGELOG_FILE}
          echo "---" >> ${CHANGELOG_FILE}
          echo "_For usage instructions, please refer to the project README._" >> ${CHANGELOG_FILE}

          cat ${CHANGELOG_FILE}
          # Set output path for release step
          echo "body_path=${CHANGELOG_FILE}" >> $GITHUB_OUTPUT


      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          body_path: ${{ steps.changelog.outputs.body_path }}
          # This will upload whatever is in the artifact directory (mainly Rust binary)
          files: ${{ steps.package.outputs.artifact_path }}/*
          fail_on_unmatched_files: false # Allow release even if packaging failed potentially

